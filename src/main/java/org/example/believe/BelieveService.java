package org.example.believe;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.example.ChatUser;
import org.example.QuestionLoader;
import org.example.quartz.MessageSchedulerService;
import org.example.repository.ChatUserRepository;
import org.example.utils.ButtonUtils;
import org.example.utils.WelcomeButtons;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import static org.example.Constants.BELIEVE_FALSE;
import static org.example.Constants.BELIEVE_INIT;
import static org.example.Constants.BELIEVE_TRUE;
import static org.example.Constants.JOB_ACTION;
import static org.example.Constants.JOB_INFO;
import static org.example.utils.ButtonUtils.addBackButton;
import static org.example.utils.ButtonUtils.addInlineButton;
import static org.example.utils.ButtonUtils.addSubscribeButton;

@Slf4j
@Component
@RequiredArgsConstructor
public class BelieveService {
    private final QuestionLoader questionLoader;
    private final ChatUserRepository chatUserRepository;
    private final MessageSchedulerService messageSchedulerService;

    public SendMessage getInitActivityButtons(Long chatId) {
        return ButtonUtils.getInitActivityButtons(chatId,
                "‚úÖ –ù–∞—á–∞—Ç—å", BELIEVE_INIT,
                """
                        üî• 9 —Å–ø–æ—Ä–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤, 3 —Ä–∞—É–Ω–¥–∞, 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç!
                        
                        –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é: —É–≥–∞–¥–∞–π –≥–¥–µ –ø—Ä–∞–≤–¥–∞, –∞ –≥–¥–µ –≤—ã–º—ã—Å–µ–ª üîÆ
                        
                        9 —Ñ–∞–∫—Ç–æ–≤, 3 —Ä–∞—É–Ω–¥–∞, 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç!
                        
                        –ó–∞ 6 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–∞—Ä–∏–º —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –º–µ—Ä—á –¢–µ—Å—Ç–û–ø—Å. –î–µ—Ä–∑–∞–π!""");
    }

    public SendMessage getBelieveQuestion(ChatUser user) {
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        rowsInline.add(List.of(
                addInlineButton("‚úÖ –í–µ—Ä—é", BELIEVE_TRUE),
                addInlineButton("üö´ –ù–µ –≤–µ—Ä—é", BELIEVE_FALSE)
        ));
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        inlineKeyboardMarkup.setKeyboard(rowsInline);
        SendMessage message = new SendMessage();
        message.setChatId(user.getChatId());
        user.setBelieveQuestionAskedTimestamp(System.currentTimeMillis());
        BelieveQuestion question = questionLoader.getBelieveQuestions().get(user.getBelieveQuestionId());
        message.setText(question.text());
        message.setReplyMarkup(inlineKeyboardMarkup);
        return message;
    }

    public SendMessage checkAnswer(ChatUser user, boolean answer, boolean answeredInTime) {
        if (user.getBelieveQuestionScheduled()) {
            return getButtonsForLaterQuestion(user, false);
        }
        if (user.getBelieveQuestionId() == -1) {
            return WelcomeButtons.getWelcomeButtons(user.getChatId(),
                    String.format("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –í–µ—Ä—é –Ω–µ –í–µ—Ä—é! –¢–≤–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ %d –∏–∑ %d! ‚≠êÔ∏è\n" +
                                    "–ü–æ–¥–∞—Ä–∫–∏ –≤—Ä—É—á–∞–µ–º –Ω–∞ —Å—Ç–µ–Ω–¥–µ –¢–µ—Å—Ç–û–ø—Å –∑–∞ 6 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ü§ì",
                            user.getBelieveScore(), questionLoader.getBelieveQuestions().size()));
        }
        if (user.getBelieveQuestionAskedTimestamp() == 0)
            log.error("ACHTUNG!!!! user.getBelieveQuestionAskedTimestamp() == 0");
        BelieveQuestion question = questionLoader.getBelieveQuestions().get(user.getBelieveQuestionId());
        if (answeredInTime && question.correct().equals(answer)) {
            user.setBelieveScore(user.getBelieveScore() + 1);
        }
        user.setBelieveQuestionId(user.getBelieveQuestionId() + 1);
        boolean askLater = user.getBelieveQuestionId() == 3
                || user.getBelieveQuestionId() == 6;
        if (askLater) {
            user.setBelieveQuestionScheduled(true);
            scheduleSending(user.getChatId());
            chatUserRepository.save(user);
            return getButtonsForLaterQuestion(user, true);
        }
        if (user.getBelieveQuestionId() == questionLoader.getBelieveQuestions().size()) {
            user.setBelieveQuestionId(-1);
            chatUserRepository.save(user);
            return WelcomeButtons.getWelcomeButtons(user.getChatId(),
                    String.format("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –í–µ—Ä—é –Ω–µ –í–µ—Ä—é! –¢–≤–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ %d –∏–∑ %d! ‚≠êÔ∏è\n" +
                                    "–ü–æ–¥–∞—Ä–∫–∏ –≤—Ä—É—á–∞–µ–º –Ω–∞ —Å—Ç–µ–Ω–¥–µ –¢–µ—Å—Ç–û–ø—Å –∑–∞ 6 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ü§ì",
                            user.getBelieveScore(), questionLoader.getBelieveQuestions().size()));
        }
        return getBelieveQuestion(user);
    }

    private void scheduleSending(Long chatId) {
        messageSchedulerService.scheduleMessage(chatId, JOB_INFO, LocalDateTime.now().plusMinutes(50));
        messageSchedulerService.scheduleMessage(chatId, JOB_ACTION, LocalDateTime.now().plusMinutes(60));
    }

    public SendMessage getButtonsForLaterQuestion(ChatUser user, boolean showTime) {
        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        rowsInline.add(List.of(
                addBackButton(),
                addSubscribeButton()
        ));
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        inlineKeyboardMarkup.setKeyboard(rowsInline);
        SendMessage message = new SendMessage();
        message.setChatId(user.getChatId());
        String text;
        if (user.getBelieveQuestionId() == 3) {
            text = "–ü–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç %d –∏–∑ %d ‚≠ê\n" +
                    "–í–ø–µ—Ä–µ–¥–∏ –µ—â–µ 6 —Ñ–∞–∫—Ç–æ–≤. –ü–æ–π–º–∞–π —É–¥–∞—á—É –∑–∞ —Ö–≤–æ—Å—Ç! –ü—Ä–æ–¥–æ–ª–∂–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ —á–∞—Å!";
        } else if (user.getBelieveQuestionId() == 6) {
            text = "–í—Ç–æ—Ä–æ–π —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç %d –∏–∑ %d ‚≠ê\n" +
                    "–í–ø–µ—Ä–µ–¥–∏ –µ—â–µ 3 —Ñ–∞–∫—Ç–∞. –ü–æ–π–º–∞–π —É–¥–∞—á—É –∑–∞ —Ö–≤–æ—Å—Ç! –ü—Ä–æ–¥–æ–ª–∂–∏–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ —á–∞—Å!";
        } else {
            text = "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –í–µ—Ä—é –Ω–µ –í–µ—Ä—é! –¢–≤–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ %d –∏–∑ %d ‚≠ê" +
                    "–ü–æ–¥–∞—Ä–∫–∏ –≤—Ä—É—á–∞–µ–º –Ω–∞ —Å—Ç–µ–Ω–¥–µ –¢–µ—Å—Ç–û–ø—Å –∑–∞ 6 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ü§ì";
        }
        message.setText(String.format(text, user.getBelieveScore(), user.getBelieveQuestionId()));
        message.setReplyMarkup(inlineKeyboardMarkup);
        return message;
    }
}
